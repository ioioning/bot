import logging
import os
from dotenv import load_dotenv

load_dotenv()
import ollama
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    CommandHandler,

)

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# üìã –ë—É—Ñ–µ—Ä –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
message_buffer = []

# üìå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ Ollama
OLLAMA_MODEL = "llama3:8b"
MAX_BUFFER_MESSAGES = 20  # —Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—Ä–∏–º–∞—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –ª–æ–∫–∞–ª—å–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç –Ω–∞ –±–∞–∑—ñ LLM ‚úä")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    # –ó–±–∏—Ä–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    message_buffer.append({"user": message.from_user.username, "text": message.text})
    if len(message_buffer) > MAX_BUFFER_MESSAGES:
        message_buffer.pop(0)

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ª–∏—à–µ —è–∫—â–æ —î –∑–≥–∞–¥–∫–∞ –ø—Ä–æ –±–æ—Ç–∞
    if context.bot.username.lower() not in message.text.lower():
        return

    # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_text = "\n".join([f"@{m['user']}: {m['text']}" for m in message_buffer])
    prompt = (
        f"–¢–∏ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º Telegram-—á–∞—Ç—É –ø—Ä–æ –∞–≤—Å—Ç—Ä—ñ–π—Å—å–∫—É —à–∫–æ–ª—É –µ–∫–æ–Ω–æ–º—ñ–∫–∏.\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É –¥–∏—Å–∫—É—Å—ñ—é, –∑—É–ø–∏–Ω—è—Ç–∏ —Ñ–ª—É–¥, —Ç—Ä–æ–ª—ñ–Ω–≥ —ñ —Ö–∞–º—Å—Ç–≤–æ.\n"
        f"–ù–µ —Å–æ—Ä–æ–º—Å—è –±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –Ω–∞–∑–∏–≤–∞—Ç–∏ —ó—Ö –ø–æ —ñ–º–µ–Ω—ñ. –ú–æ–∂–µ—à –±—É—Ç–∏ —Å—É–≤–æ—Ä–∏–º, —ñ—Ä–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ –∑–∞–≤–∂–¥–∏ –ø–æ —Å—É—Ç—ñ.\n"
        f"–û—Å—å –Ω–µ–¥–∞–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É:\n\n{context_text}\n\n"
        f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä."
    )

    try:
        response = ollama.chat(
            model=OLLAMA_MODEL,
            messages=[{"role": "user", "content": prompt}],
        )
        reply = response["message"]["content"].strip()
        await update.message.reply_text(reply)
    except Exception as e:
        logging.error(f"Ollama error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –º–æ–¥–µ–ª—ñ.")


def main():
    # üîê –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π Telegram —Ç–æ–∫–µ–Ω
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—é LLM-–º–æ–¥–µ–ª–ª—é —á–µ—Ä–µ–∑ Ollama!")
    app.run_polling()


if __name__ == "__main__":
    main()

